// Copyright (c) 2009-2012 The Bitcoin developers
// Distributed under the MIT/X11 software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#include <boost/assign/list_of.hpp> // for 'map_list_of()'
#include <boost/foreach.hpp>

#include "checkpoints.h"

#include "txdb.h"
#include "main.h"
#include "uint256.h"


static const int nCheckpointSpan = 500;

namespace Checkpoints
{
    typedef std::map<int, uint256> MapCheckpoints;

    //
    // What makes a good checkpoint block?
    // + Is surrounded by blocks with reasonable timestamps
    //   (no blocks before with a timestamp after, none after with
    //    timestamp before)
    // + Contains no strange transactions
    //
    static MapCheckpoints mapCheckpoints =
        boost::assign::map_list_of
        (0,	Params().HashGenesisBlock())
(1000, uint256("0xd5b682aaad7ade4a1fee56a7a72e579b16c1127949d56db0baf928e3afc4ddd2"))
(2000, uint256("0xe844d8346744f986ad198422b450fb1796ea5e2239f87c0a71bd7c6a67891c7d"))
(3000, uint256("0xae2f783314c5ccaa388b71411b0be739fdceeac83b508f0a298ab4514da2f62a"))
(4000, uint256("0xb18808d2c671ce5abea982f63f3cbc4154854103f3733ada9185d0d61ec19590"))
(5000, uint256("0x923fa49ce5c094e9edd583f50e083a713ca9040dea9261e5e1529d1ecbcd0737"))
(6000, uint256("0xb0216e0f9febf69dd371be83806b38fb09c9e0a64f4b7ccd522c28c6bd3cf377"))
(7000, uint256("0xc59ea58ae10d347edb99d56c00aa9698631a5a96697f28b92860cb6f810f1262"))
(8000, uint256("0xcf8b7731a37adad4441d4be1c3847f1e5afe58224fa7f396ad7d80d6814d7dab"))
(9000, uint256("0x1a39c4138b999ad7154f0bac511e624cb4f9f756c99a13e6e88562498a572b73"))
(10000, uint256("0x349ffe356822f3402b05e5b688b45be9262161b7b84dc56e2fd978b9b587f751"))
(11000, uint256("0xc8ab1a0006db8e54f0d60b6c64731290485c7c37e2795171560a71b18a1f92e0"))
(12000, uint256("0x87da21e17269755a616f11f8b9c2b166edb753681360cb277992be1a4e0660d5"))
(13000, uint256("0x6afa871ccec7081acc1aa3284acebe62c11e7baadd2e5d699489ddb46fb1e9cb"))
(14000, uint256("0x3b29c62edc111e1b3da2b00d8c8fb2e7b79a38f5995d23c2581e4f90c5966411"))
(15000, uint256("0xfbe416429c98f5473096017df72ffc6883ab2c82c3bda65be02574812ed2e1ff"))
(16000, uint256("0x314f79378d0a12eda5cf879fa29ecd04a9e683f1f6acaa4d75dfb84b2028633c"))
(17000, uint256("0x6089a574a0f552c06605bad7a1d63ed95028533522a285c736e2897bf25d4378"))
(18000, uint256("0x371816d00c0396a8976115fd39652a5b0476f96124c359d518dcaa5098eb4fbb"))
(19000, uint256("0x8b44b99f8081b70d025b904577443a52308a291a1ed85c04070e9d4bc3693a7f"))
(20000, uint256("0xe6316397e8814cfb69ccab4e16ecc6891c9d9fe62db696b2e6e41dc8f05e1faf"))
(21000, uint256("0x1e9d3bd849fcaed5ef656b743ead3e89e64f793a39c7f52b191c0edc3965ad70"))
(22000, uint256("0x575806862d82a29949f4fe47c3f793663d2b71ccd01e39cbd2d75e7bbdd34d4c"))
(23000, uint256("0x70bab1657f957a017374a1169c1f06a4af581c241e1ab168282b1b4deedbdbda"))
(24000, uint256("0x2321ade2eb7be8fb9e77df45c488013a47f7bb9b823144d8a40bf860db3af986"))
(25000, uint256("0xef6b44a8a983fb06f34d3efa02f57e50c2c336f8e5cf337f7c240042cd14a1f0"))
(26000, uint256("0xf0190212f41a714c999949b7aee4cc483d865c907ab1b2fdd329f8e7d5e1b178"))
(27000, uint256("0x3f6fd22856353af94be741d4f7014cadce77e329aae0b4ab20cc036be3072108"))
(28000, uint256("0xe74ccfcfad3ad5f333633f6ee5079ea2a13c7ddb514e96514dcfb8703cf4d93f"))
(29000, uint256("0x8a79dd366e824d8801387e28c1737f3388489e8244e83a6d736ac3f0a78c6b9d"))
(30000, uint256("0x23ada81b38aafcdea53cab8a30d59da989c32133208e6d3ab740d76c0de1f72a"))
(31000, uint256("0x490db7d1f37817e02b2fda778b86e1f141be5a45ea55f1106629277841926251"))
(32000, uint256("0x2bc8d8e04e6c2159d868e6225ea3adb3f5255f62a3b089db4d64209b9cd2951a"))
(33000, uint256("0x3f750d1c16d5ca6b8d20f1678ce0add4668f2245522c26cac2e997c89764d5e8"))
(34000, uint256("0x70d44ab4bbe53da97860dd21dcaf06d2e853d9265290314ab66ee8848149ce29"))
(35000, uint256("0x5ab0e6c956d6bc9a516e18581cd1a8a15b6257addefcefc0d1541ceea5d0b33e"))
(36000, uint256("0xaf7e0d018b8e79bd6d98d28ee55c5f7331370da1de12214bc4d4197b6ba2080c"))
(37000, uint256("0x1a6436a4e011ead17e45e61ba359891886aa8535a95472f08210f8b212da5e4a"))
(38000, uint256("0x2f38ce5aead9ef1b91dc09a7951c541222023aff9e5c0641b62c51e940e82e10"))
(39000, uint256("0x9ef8dbc0bc57b4fdb62ffccbdc8e82db5c2a09d6cefb7ec5653412e8c2334f82"))
(40000, uint256("0xb920fdc4a32c748a4e184894fefa9647ceb06983f6729d13a9e5f6df57de7b40"))
(41000, uint256("0x71d531a4fe289e0295aac5a5caf79247e9a3e5d431dc8409d56f2e3fde25e52e"))
(42000, uint256("0x54ea97263215830e5755e23d810ad373f9e5807c16bd9ea5ffaebef3aa81bc01"))
(43000, uint256("0x15b73c6a207c59eb192d397eb9cfc549b348e86293e96fa1052760f144718d0d"))
(44000, uint256("0xbd0c6c0f266a626356e7434a10a8ad0d03644877e120d88614ff503a58536aa6"))
(45000, uint256("0x5207f79726dcb110f5e0e1252f7743e8f3f99920a2e210a6e4c918682ff10c24"))
(46000, uint256("0x364792c4edc0024aa2db2ef7b75638c537c091ffb58a8f86b572cbc16d8625f5"))
(47000, uint256("0xa7a56449db4fe048fd45c0d4b0296b3396adf3c4b587352b4e5aa2f1acb4dff4"))
(48000, uint256("0x51294ba4bb785aed2d36dc6f7c58f48cf23c956e13a013b05e620cfc593f537f"))
(49000, uint256("0x0123e44b32be8f5e23c2995bb1c2e8d8130dabca0bc802280108cb1271fd57ee"))
(50000, uint256("0x0e472626160d873211b1aada2c55d5834b91960d53f97d83b71a4c85f9bf423b"))
(51000, uint256("0x5f2f50a4b2a8ecdf398e64c0270967862b1cdd8ff627b90b85d8a6b8350c5c6a"))
(52000, uint256("0x9132a7c9553d7c0deac2572604b4dc081f6e3e17cb5c69b8f329ee98a867ec50"))
(53000, uint256("0x685f342754cdaa6bdff059fc1003db217ecb4ecbbc9382d5603c1c821f55832b"))
(54000, uint256("0x2fef9260b2dd84df3e9948547c22fa7ba5847ee2e48d79dd44e5d3e24cc59ef9"))
(55000, uint256("0x0d452d691e1438b567584e311c6981b1e9d25a5245cb71e7d31d8cf735b7df40"))
(56000, uint256("0xecb541cd8254b68583300e2aded2f2f2bad86353655eb1218107d941b37d2943"))
(57000, uint256("0x2e7ce43deb02243c7a3eb2b6f87c67026fb9eedbb7d3f02810cef77fc0b03c36"))
(58000, uint256("0x165458155d713c37692702fd9248503bf833d4e465403f42561679a5a0ec39a3"))
(59000, uint256("0xd16e0aece0832472165cd902d42f0de1429f60a9003447f65768ebc5c0ede953"))
(60000, uint256("0x0aec75c2a4d928d97dcb10765fd4fc550f403c3bbfe7c53c3f267688d9141706"))
(61000, uint256("0x6e5925a5ed5c301ce7a6f0a1d41cd6fd1198e54a639b14386e9852b6c602cbc2"))
(62000, uint256("0x22794d6158ff2069f39df775cd37c8d4bef1bfe0d58d19d854a354d41253bcd0"))
(63000, uint256("0x2e8de383be82b0a95de6f4eb90436665859179fff29885e940cb334eb0388b6d"))
(64000, uint256("0xb8104692231dce9db51b6883bbd86204819f9b680c981f00fc1f860a381750ff"))
(65000, uint256("0x8c40ab4f546dd82f638bd90e35c8d3ff7b7015e0756d5df99575f3d1bc334141"))
(66000, uint256("0x366910bdb6e2f19938706d159e43690e51405d9ccc4e44d4811e98c7d589a004"))
(67000, uint256("0xc1ce6ee4d7bbab2c4de90b245d915f8bfc905b88dee2d4ac68733730f5396228"))
(68000, uint256("0x80a6175052918c29986fe1b0f1e2b0c2cf43720035349f1e451a25c391383cb9"))
(69000, uint256("0x4d9fc577ba140f8e3cb736348ddaa7f730a7489a090636586e0214802413bebe"))
(70000, uint256("0x027fc358ed90d6e26dfb0341f4455044505605c18288d9519bedd295581939a2"))
(71000, uint256("0xd5b80430b5e052668e44259ec1fb94cb9f99a2b3d4554ea83a18b2009871170f"))
(72000, uint256("0x54fefec970d3d13251aee732012006c8eb4f4084b1b77e57eccd5223e46acae7"))
(73000, uint256("0xd8283b8ae0731652e97bdaa0765eb72955e5da6d73a815724fcc340a0cede0d1"))
(74000, uint256("0x07ed183fc33a5c5bc9370d0d9983be17c0a9122f322c299cfebc653e8bade5c7"))
(75000, uint256("0x9a926cb0c8e87ce1feea7d775209660261d96adf8b103d9bef3bf385588ce80c"))
(76000, uint256("0xb8af5ed7ef9d2b08e5efc2476a9eaa9315e39d7225005983f5cfbd9f024daefc"))
(77000, uint256("0xfed447627165888ecae55b6c109aac1a3995f3817a4c2ca0ae32300e0a159387"))
(78000, uint256("0x7fdf6949742251c5d14a896120ca41d696b7885137a8402312c86be62e7948b7"))
(79000, uint256("0x041009dc217140b05a7136da9e8719ef1ac257acb705d7288dce83e00c1c8bd7"))
(80000, uint256("0xf1327675f59b5f858acd97a1beefb83ad1e430f3158e8b2b3cc5f3b5f06e2bb8"))
(81000, uint256("0x011f726bcb5a62b663ef1c6c33d75dba3034575abb254b14f373c036ee4a6f72"))
(82000, uint256("0x815f08ef308b183c6d3ebe38ea185f1bd95aa5d40fd73a2ea40bce19ba96373f"))
(83000, uint256("0x65b9d50e8f28aaf9d31e869da3553eaa38a1a3482441467089b9bab6fa79f8f6"))
(84000, uint256("0x3cb7ba515862266e59739b00c435a459a630ba802d88a7c80c6ea8274bbf848e"))
(85000, uint256("0x6b2cb4afaa581290cb76f9557d99b59ccbc2d75dadd37d9cdd4274b1a444c993"))
(86000, uint256("0xd16f5d8bfdc2a7a73df924dcd3f162736df497b70a72b86fdc5d81bedc8dc340"))
(87000, uint256("0x35b425419baee1b8c6f69b31b22c578fed71dd25725356bf86fd6f51b09892ba"))
(88000, uint256("0x1fa8e7d749f1fb1ce6f5847ed80144926f6cb460a5c11c34415ba59a34c8db4d"))
(89000, uint256("0xb5082230ec2d424a377ff8f91699368b6c7f517a7617e1ed198e3c8210ffc54a"))
(90000, uint256("0x6d8f30449603e2e9b459fa280fd44b7de9e1f543f7803fdeab3392fb720ff593"))
(91000, uint256("0x995c0dd09722d700260ce7c540fcfd6a3620e185c368f926693a230300e63ccd"))
(92000, uint256("0x094489d7ce03ca397e594fd47396b94aecedb7848a3658a62ad385ad1e2e81c8"))
(93000, uint256("0xdb2005f5292a84f0cc048b078a4ba03173fb4885b2ed8796807f099a2ef95a6e"))
(94000, uint256("0x65a5981e4d93a5ae8457ca47e4cba3321e0f081fa1a7a283fed66f07844bf058"))
(95000, uint256("0xa07ab6354c5bb8e36326fc4b86e3fc3d4021e108a665f9f904c41528ebdfc72f"))
(96000, uint256("0x2531dfa933ba9cbd35c8bf66ee568b19b911e79f290723857c7ed0badda6330c"))
(97000, uint256("0x373b0b57e5b151109971bbac5b10b4c20aac05acd4a5df29becbe235fcf604f3"))
(98000, uint256("0x6dfecc690c3cabe407a1c8f13b32791bbb21ffeda0548474517ddd87b2247bbf"))
(99000, uint256("0x1045042f079dfea9c5d62218e9434a54a58b9518779f0abae20b20eb5f248ec7"))
(100000, uint256("0x931f1616be286af9d086ba63ce92627a5aecd45547be14e79c031663fe8ade46"))
(101000, uint256("0xffd55d073a8f4e5ab67df2eef009792fae9ed8b839e3a05d839cab1841d355dd"))
(102000, uint256("0xcb4e25d4634b8d66e243f3ca1e79a9d0cb1024153069d200882a68a5c91823bb"))
(103000, uint256("0x4e8ef2de2b415ae4c08599237d94eb0ee30d8f017eae9dfcb39a4e96fbb927f1"))
(104000, uint256("0xbb1dd669e5d2d2e931500cbebd0408a44666fff05b42669de95d1bcac74c3fb7"))
(105000, uint256("0x87d67c72526eec43857f93ff9c90ce75ef7b66d8c364eb19d075a0dd5b450079"))
(106000, uint256("0xe2870d540eb96d373a2db03c49d27ad0499f5b53f249ca418f0ff1232153651a"))
(107000, uint256("0x44eaea0a7f632edb72bc83c3242ebbb6ca8c4e657cf9a7bba6ec0c732fa81629"))
(108000, uint256("0x78d2dde1b96cd4906b54955b6483683647bd0543df874b2442b9d11d5cf850e8"))
(109000, uint256("0x50c4d598baf63b4090a82d2987da57a0a998fcc6650fc6428ccaf11754201b4d"))
(110000, uint256("0x99ba9914bf779937daf218c12646ccc8987e2e2660381b4e7973628302d9dad5"))
(111000, uint256("0x7109d7ed72b6bb0e227a985c7f0af66ef6fa8b833f4f4510286fd802eac3e951"))
(112000, uint256("0xbe13f67ae713f870f8dac344e5851e59a300ba85d5090603c92d2433092883d6"))
(113000, uint256("0x5f42711b9d273019a5f689ad4dab4ea99e1ef04ada901c3a914c7137f578e04d"))
(114000, uint256("0xe48c39092182680f652b4c35a6a566c1ed69047e4d5989172e75b584b1fe2c16"))
(115000, uint256("0x2aafeb837b02a40a040ba9881dd76e99f45cc3a0f2bb370a2c5774efbbaa49b6"))
(116000, uint256("0x97419b5fc59ac3298d948215745992a49173465129b5738720282242ee9f0d8e"))
(117000, uint256("0xdb19e570a4a3eb4cd798aabc4f88aebb92b3429b4c377ca00ad67b4f04e57a7b"))
(118000, uint256("0xa1bdb182d4501e91c67694e9bb5074edeb508fcfa770a8f51f237c6098485a90"))
(119000, uint256("0x8d69340ac4342564f385668f35232c99bc3ec7875008643133c3610f41ef9281"))
(120000, uint256("0x050869f9f5ffa0a58d948ba95a3179464e0021b515538e8a0ea8a7afcbb47627"))
(121000, uint256("0x365ceb0d2653ab0283365a9cb5478c530a750a48815ffb0bdd4e5487b1a8e1c8"))
(122000, uint256("0xa777ac23bdc9d4dc48ba7a2919e50027bee8b399dfdbbe9c022103090f70482e"))
(123000, uint256("0xd3000387323816792dc0fc62b3ec3268de0318cd3bf6e47ce41ca3ae7e6a3460"))
(124000, uint256("0x5118fa6973294328e62183f2d2e1f3e83b98ed97f8721a7c9023565d8e5c4aba"))
(125000, uint256("0xdccd2fc183e550ab8a26f9e33a52e212c485ff2500cacc365f45885cde1ace06"))
(126000, uint256("0x5166cbc80cd1e4a3ac05ab200dc14c18a4a9f9436d1ea030151d07c4229097da"))
(127000, uint256("0xa2d831a6e73a87fd238a4f99351d3e9f38daefa67ed0ef43d5f3c9641df013ff"))
(128000, uint256("0x89b47c2be0633af96f2fa1ba4903b2cda6e0997de6ad7722ca7030b7dcf73651"))
(129000, uint256("0xa0e53245142d940f6b4eea7e59e3f82fdd44b197d55fbe284ca97a95025c17d1"))
(130000, uint256("0x2ae1b6e8e82e693a8d6056026a678f12c658d3e79651848d2d565ce3ef72a78d"))
(131000, uint256("0x44c1f29ea4c1521483c561044f633fb8250631816cb062a9ddaf8c327f5fd015"))
(132000, uint256("0xa1d04c3df8d065ed8d1ace7746235b1d819634d1e037b22d05c45cc8da28e132"))
(133000, uint256("0x441ac0204e0eeb397440c7a9f240abfba95c13b98440bfe835bcfa87dfc0b1bd"))
(134000, uint256("0xcdad17f2dcd894c3e09309b9d156819e66784320187048b58203223c6a23c7dd"))
(135000, uint256("0x0fec29c7781543d3de04379f044d8f75fbfa315a06f0d4583b616c6b6a9a2d2b"))
(136000, uint256("0xa398bdc1ea5ddbc1e5916a89217079c4b1dc93ad05a5082ff12e8ee79ca22367"))
(137000, uint256("0x4d9d35fc0311a010c3eb1f62e7faf06ea57f25473b76f645fd8e51f53173a60a"))
(138000, uint256("0x668629fd162bde2516057c8a54ea462bcbd90b1520c9d4a0311c1a71cc3bdba2"))
(139000, uint256("0xbbcf84e8c485c0cb839ab53adc893996c41a0a9b852789aa05746127a28d92fc"))
(140000, uint256("0xe4bf2f51782fda59a6267daf860933a3f18d066c393ace736dcaaf386a7119ac"))
(141000, uint256("0xf7c2beae1a0c9b8b8f4c2c5cd0e9c681daa22884acf5fbfc63209d2136f01faa"))
(142000, uint256("0x06a382ef568e76f3e1b169dc1c27af41c88276910a5a0c77bebfe56f1df6e73d"))
(143000, uint256("0x0bf98d90a3ca7c43cd42306c23c37aba7ae71859c254f701dbffbdd3cf3d1265"))
(144000, uint256("0x856500977a481897020229fa5f0914d1b0535d4cc9e5c0d671d2eea13753846b"))
(145000, uint256("0x900520bf4275a9fbdc90b2bab909df79208ad3dea3339dd1bcb193a4b0f3511b"))
(146000, uint256("0xe1ce1233eabf8f7a2627b200f22f24ced481375d1f7699c3be90c694500d49f8"))
(147000, uint256("0x0bbbd949ebec89f462e9235d788358eb84d17f5a35e8f5afe48699b9e947c4d0"))
(148000, uint256("0x5556e751026a3067e1f711f469b2dcf35f38e3e29f5769b1f4e4a2728f23e961"))
(149000, uint256("0xcefadf67285fd9029e2a1decc429770c71a1a996883568d683d7b1d40bdb7652"))
(150000, uint256("0xf1f2a14621a7286e36924f7a060af77b190c55ee0b8871c354f426caf6bcd11c"))
(151000, uint256("0x8853de7a5528e911bfe8720565ab731eb5f432f5fd92ec193c6eeb2a799e5059"))
(152000, uint256("0x6b595c5a3ac5d649e3b26b649707a2bc7c4e8d044f8edd821009c3853f40fd77"))
(153000, uint256("0xef86c38e6a9e58b736a33cda3181d8f3ea500fab2530fef54074701380d39384"))
(154000, uint256("0x0afec30695a4f9194022912cdb4bb2253646cc8bec6199d0fe8bae8da2ad0a74"))
(155000, uint256("0x980eb010d2dc7d8f5a450e734f9716c182e52b5a43ff9424285488a38a8759a0"))
(156000, uint256("0x395f0c928d5bc383abec2af5cae64146be901147c3160aafa3a39bb90e96535c"))
(157000, uint256("0x65160cc909c5246793d5b0a8ab2796c965207dec8433d5fb44085d1d85dd512e"))
(158000, uint256("0x51dd32549ef03e9bee8c5ad169e8bdb12627b804c8184a396c43d56a7d875ed1"))
(159000, uint256("0x175434f76dfac0989878cc0e333ced556020febe645303cb73378f24556d7221"))
(160000, uint256("0x902258ad871f20133ea9e4fa2a6fcf24b610d053622459d1094e4e574c0d4459"))
(161000, uint256("0x3daa7867b5f262d3fe9c768fec63b63ef11af43cfd6c7705b783f1156112b693"))
(162000, uint256("0x09f35835e01cf5392f2a04e7d6b15dd6cb436d5974e24d45f92735596d87a12b"))
(163000, uint256("0xb6c32a52cf149341d45d311977f47283ec93c59beae918ec1346afc0e865bb4b"))
(164000, uint256("0x30dd114547434b7f107f9dc27d0c80009bb7faa93764e6c54744f4024dc624d0"))
(165000, uint256("0xe8cefefd4476b9bdacb393acc0e147b89d21a391d7c814d0cde67d8ae5f3cecb"))
(166000, uint256("0xc6c2e6ffc8cdb5ee09c015fcc1dd2a66ab1dc0fcc77d30d228df34c5baac3ae6"))
(167000, uint256("0x72bd31a9361708e6d8c2a953256553b1e0875cfc91d1885c0ccdf9556ee4ec32"))
(168000, uint256("0x985fd1f03423d33f6c0895e806895a7ddd7700abed72688bc3fc3e17e34b0118"))
(169000, uint256("0x21e45d21fa64aa61dbac310004ef8856b69203bf194ad39d84a295d861ec7797"))
(170000, uint256("0x58f51fb90b015833e2a5f9b3370005a8da8eaecada4e96e076a0adad5eff6917"))
(171000, uint256("0x4326c5a66ea236e8b5b46a4a89a5f566c1c571031d0b8a4a31ae5f691386275a"))
(172000, uint256("0xe406906e63e0a8c314fd876837610c25d4c7eb6af2b20a777caef8a1e7439ad9"))
(173000, uint256("0xe1a7f3507b56256940a25e0c6ed5248fda5335d50408045f0bf0c0c13ec64e75"))
(174000, uint256("0x120864e336510a25b40a7cb60d5df5ef46680dcf94748cf6b569dcb197a95b03"))
(175000, uint256("0x3ace2aba0d572771c51b410e73da62842c54e92b992a9fc44de6437e372f355b"))
(176000, uint256("0x3e96ed1c98407b2761d9f68bab8a27f5db92c6267c3ac57a15b571d953db4d04"))
(177000, uint256("0x328e9dc33085b4361d4737b5c870086d7f7e773e43cbd1129214778a741b8464"))
(178000, uint256("0x8df11b71b9d85ebed65a7fc83f899a7ca581bee6ac078f1426a51a9f7ac70cc4"))
(179000, uint256("0x07dc793b4976da982667040836b4417652ee142499268cb0229ee92e972e47b9"))
(180000, uint256("0x4717a6237b5389fed3d1823206842af6ad5d0039f4b4fe6c99230f5186bd37a7"))
(181000, uint256("0x0b233dbfa8c8d246b1ca0faefb381f2473c4d08d9c851b48dd09cef102c131f5"))
(182000, uint256("0x4f43e3fd278429508661e718afe662ffac6cf10cc0969aea3ae7080c9a28cbd8"))
(183000, uint256("0xcf89a26fc2f15d761b9697e7db26cac40dd873998c3b861fb1ea16d0678dfe2d"))
(184000, uint256("0x95511ec01df29dceec1c1b722f981f0cc50ba8a62ae851af073c27655a9d14d9"))
(185000, uint256("0x361e4aaa1cdf2f8aad08e0bb499ea02f286d74c28f775e60c937cf8d5937eaeb"))
(186000, uint256("0x91d2dcde61fc2da93341f4218f42bc13e99f1bc6843af0c29b2afdbd4cefe847"))
(187000, uint256("0xad6c90643e7ee70cbe767fe7d9c4a45d414a9008acd0e43f121d82f911a31442"))
(188000, uint256("0xde9cf255f260a6b8e5c86e06951f9ba64049c0d20791fcdc9ac0b9185ad195dd"))
(189000, uint256("0x14ed5f315d356bf25925a6a36ca38f1199ab33390a295f9bc8bd13714149a340"))
(190000, uint256("0x93c605c38b4c0459c54f0cb988e290d6daf9a1c4318785a1cddf6dc9dd53b846"))
(191000, uint256("0xcc465cb67b6d8a09bc5bf77f6322b8eb7ab0f341826b1b744ceff1704d63ff44"))
(192000, uint256("0xa9220dae34077a8665568ca9086a5c698d80cd460c41582947e7e6f5a7c08406"))
(193000, uint256("0xf0526334470f9f8d1dba17a25f6f900b718c2792729b0587609fdacc743c25d1"))
(194000, uint256("0x993bf7e9ab2ef8625877c8a257ceb7578841d8c37a0d836c6e6875bb79bac0f7"))
(195000, uint256("0xa78c1501c531b3c10e870a165907c8e996fb5c1b5bbc86290f29725d13a0a48b"))
(196000, uint256("0xacbc6efb09910a7407e9abb725a1c1a9ebbe74e82fd7c6bcca10572c8bf3d63f"))
(197000, uint256("0x3720dde151eaddfd9bded1dab81e1f4d06f48111ce032c10bf698c1ce59b7b28"))
(198000, uint256("0x938ad80a59ce329cdefd37026ffdd2f25e894c66bb8c9121d807eae34e69ddf6"))
(199000, uint256("0xda01908f35ff3b768f5344dfd5b408e33af7c0dc510cd3475fe65f989ddccc92"))
(200000, uint256("0x3c6a49f7d8345be9f0c1f4023509a8bbffc9f4478e79dca1299be8dc1a27aeae"))
(201000, uint256("0xcea2cdee34f3b0f757a1cb998d9b0ebcb5b852697362185b3ed94cebe260588c"))
(202000, uint256("0xf2d34f63135882be7218398fa0c037c05de628d0c75e795c269d7e001e043e89"))
(203000, uint256("0x6ae9c256b892573263be9dd45dca1edb9f7e607bd96793bad434762836186637"))
(204000, uint256("0x7c70d83b38f45e719ceb74063aefef3996df0f6fa35ececdaf6da89c406b00ae"))
(205000, uint256("0xc7e2ca83f89c6d6c0cb4aec9683d778a5d990530e5b35836e5efd53be71850f8"))
(206000, uint256("0x32ceafca79278c9c2e4c66d1cce59d9cf3698197c721573e19cfe5d8868a1ca1"))
(207000, uint256("0xcf2e9ff6dfec1fbfb6153cc77db6dad04ce38fac94714a31194eeef2c0e981e4"))
(208000, uint256("0x23f6eff01c5364d177e572a645982eb8aac6ea19318a4405fd8e6ddaf881b863"))
(209000, uint256("0x26771f43e67f93f67aae81a8a05cdd565b41b8eb2a576332a5c44ea5ef938185"))
(210000, uint256("0xa154a45981b2496e4f78c05d7c959fbdd24be63e088acde1f3ebfc3c9bfadbe2"))
(211000, uint256("0xb1454b94c5ccfbafc71be9a7432d2239e604916a241d8a4bad7158f0bd780c52"))
(212000, uint256("0xf031db6a8345b5440cae4e190db4e4716f5dbcaadb9e1722921cb466f1028a7d"))
(213000, uint256("0x0872d63a056837fbd70945ef8c07fb185b986d4f1a85632b0e64f09026273367"))
(214000, uint256("0xa1970e5a871d3a619eef7bad65b3b64007511d2ef95e8899fa6ea2b1eb36eea1"))
(215000, uint256("0xda88147ba01cff0c3d961eeff07b5d2a6ed4d5612dcb54c41c43e3410af73105"))
(216000, uint256("0xe9aeece100005b54683860885ebaaaba9ce0bf1e970301d8973930028fa2b4da"))
(217000, uint256("0x3d53fc096b6c2297e8c8d775e8b3b0554e33351123e3adcc45c807a889020999"))
(218000, uint256("0x1b06414d742de90372c7fd8a8ab4e103df02294fa9be0aac5e683e59679f683c"))
(219000, uint256("0xef45b5594d3ca105104e41b1afcfe4e6a90cd47380153dccd7c270bfd518b8bb"))
(220000, uint256("0x11c411162ab913881d749998e174eedf686ceb9e33eba71cc7aa0f404dc67ced"))
(221000, uint256("0xc3c2e42a2a0f8e8bdca0ed05da208cbe913ba752e8c4d3abdb2f7076aad0df2b"))
(222000, uint256("0x06f2b2da123c966f8b97eb577b7e524c20da9a5d29f223956e92f1d58fe2672f"))
(223000, uint256("0x91065049d6b0ca70553ac3f18fc5df064d7b4d868b07629e344eb2a3dd30e930"))
(224000, uint256("0xb615e672b5a11ca24aaab957e0a929059fa11db09a887faeaa41ee780438682d"))
(225000, uint256("0x2b53f52b4e79e9a327b47cb0bea59ed90afdef12a25b3dbb6fa439a259c58031"))
(226000, uint256("0x0e63dfab24bca29f827f758e60d4f8afcdc73c6da62586823d61701679347567"))
(227000, uint256("0x3e6f3f33862b0f2e8f4e041640c8c2e44b0f73c0bd826d54f90808182a23741f"))
(228000, uint256("0xe59674c607e335e8b53e2e9f7b898552376e1e04a516e4e6270b109c49f8470b"))
(229000, uint256("0xc4c0be7e49c770c6ced00464549b5d8d5970b69b47dc450a191f33b4b6879a7e"))
(230000, uint256("0x80261641ce341edd006fa48479d914fffb093f087aeea5b30436d9efb681c079"))
(231000, uint256("0x4a7d8f5235483ca071de8e322cc85c1a8579d1c77564bc3d67966ede85bee4b5"))
(232000, uint256("0xaa19f9ec6e413229d4359c96b44fb637416e92b3be56074a9354a9d4fb6d8bb0"))
(233000, uint256("0x527492fc87e58f7779ac1dd892638285c9ce63abed11d0e904070176fa319df1"))
(234000, uint256("0x80536fc354ec7439e0081ec0e5b6b8c70342446bfaeaa4aae21517c1c82b12d1"))
(235000, uint256("0x078520e6ad3ef1265c8c252a600418cc619789976c8109c5b185129cdcb6ed47"))
(236000, uint256("0x36310d3f1531822b0caeefc5194269947510ec404c2b7596041f78295d4b3f4c"))
(237000, uint256("0x41e20d3c6715540f0f5aa7a21a8087af1383256fd5a22f5aefe24b83904f87e6"))
(238000, uint256("0xfba30086cbca5d5dfee606758bb66e2e933434f1a750fd828e8a8724b50f272a"))
(239000, uint256("0xd7d936e7cefe74990cf411719bf889cba1b9711edb017377bed14ed9d068ee82"))
(240000, uint256("0x4c6544d5f72e3ce74c3a3b4741655717a1405322858fc6f47ecf33c89ec62cbc"))
(241000, uint256("0x32f794ea85d2c69fa960e4034af459465c17e5b23586faca9c62d50b0d71bad0"))
(242000, uint256("0x975583b7b4663c13b69424fe59f5c21dde01fabb237e1943f4e9e7ae78ac95b3"))
(243000, uint256("0x97aec5cd90829f203bcfe72b62af0df95ca85cf972a161304a22f4808e30a88b"))
(244000, uint256("0x3fb0642569bb916f01b51e2980ce9ef398e5b7fab5fd26c5e86a4c23195b5565"))
(245000, uint256("0x5eec40d953dc6f7269906fe998b47f748c30b6607bd3964ceba3138aab32f12e"))
(246000, uint256("0x7f8fb4c61396939b6255e7f43c3357f86ad8287edf51a42524c1a75eaf66d87a"))
(247000, uint256("0x3620790ac095a44a115e8df02c1d5f44d9ef3894f7c91c6c8fa007b686cff3a9"))
(248000, uint256("0x318093c77addaeaf5894d271ac570c8b709f7786f2514b5b64defdfccbef19a1"))
(249000, uint256("0xeab522e57189ac65897ad25b3415f4f3fa4af0f8fbdf09e2694df0f0a19503fb"))
(250000, uint256("0xc6db97c0da0b5dea365480bb008b3ee9f5b7f79c83ff13d43da0a3e7fbb72e6a"))
(251000, uint256("0x8c030dc38e6cab9312743d1c521a0527c7937faeccbe5255f848612ef8d806c3"))
(252000, uint256("0x2bab717bddf7246689cd86b1c948b548f7ef7a392956be108d20a3c8bd6ca138"))
(253000, uint256("0x954682d83766c7f60b543c3a99df6cb8119b00691b3fa22fb2b7ac6a702f72a2"))
(254000, uint256("0x13df4c82ea530c0d60d15e90442e99380fe67315e954b2fb74f252430a48b0de"))
(255000, uint256("0x85205576381d3c15f97d1b5fea4a21c44ccdef9cafd503f4318a463632e92292"))
(256000, uint256("0x020b681f2d56c9ac0434d5e3934a76003f3cf65e2b62a65f95b4887861816b8d"))
(257000, uint256("0xa967de2060a766c54c7f0d18af96a38fa7822c364db79f6cc6fc2715087ca4f3"))
(258000, uint256("0x759dbc25f09aeed5550e011566d03873f362e2e689c3302937d64c97d984a1e6"))
(259000, uint256("0x29a4dbf5144ac4bb84935254035c3f2ebaf4f8e111c8499f340fd3bf5a0ff792"))
(260000, uint256("0x0026090a683e8971eb5c69d94d5da5a6f58c251f24ab07d6a668bf354fc87ed0"))
(261000, uint256("0x5e11afc880c11f64da487ea9b82250043ef1ee73cd642e54115e1c8b0e6dc002"))
(262000, uint256("0x5c7496fee80a2c956e62f4c0bafebe0819cd1155f61d9ab9a443018300d6b454"))
(263000, uint256("0xf01471a5452b5c128ebc188a3939e18942fe1c63871142ec6edc9f43ea5d51c0"))
(264000, uint256("0x91cac48eaf9db4615e27113967c282741b624234a9b64503d155054fa54d909c"))
(265000, uint256("0xb2fdd0a7283804cd9edcb953f6be7679d2d27927b8a651cbc4c452363152523c"))
(266000, uint256("0x3e3ca9121cf0c01a5288924333dfc74c2f1effd3291b882c569123db71ea3304"))
(267000, uint256("0xdfc119dfd9fc605942bf562a58fe8be61922f6ce64f3f6ce2db93bc9fc5cf9e0"))
(268000, uint256("0x3acb871babbd99162bd53da2cc5dbe98b6ac4ce05ebe5a569fe6ba0e9085a3ce"))
(269000, uint256("0x3fd1a3195a34ce597d3978d9b70d52aecbdf6682aa30c5bd77189a59ef0c200b"))
(270000, uint256("0x0649075c03be48ad58d77f174d71a82dae634310979e65d54fef1b2cbff7d7f6"))
(271000, uint256("0xd73dcea74e55bdbf9484fce99e69b756468a48307c12df9ab4d440fbdfe67529"))
(272000, uint256("0x05999d0e4d045449b58243b4dc636e1d873f5133a15adbd42eebe641a3bd0fa2"))
(273000, uint256("0xc7f103fd6e28f1c2c45869604715658ccb8dbe719ad112e6e90f3c4ec3fe0d0a"))
(274000, uint256("0x72188752d2634353e1f4404e0b8309b5f7aa16aa43921f371b418909deed16ac"))
(275000, uint256("0xef534a18b2ccb86253330e79f7bc01d9618c626bccbb9a07ccf121c297769708"))
(276000, uint256("0x78f6b66b38b23a42e5b9435f17997d5726ee142d6b7b9e94f339acff56b74e4e"))
(277000, uint256("0x810e7d9a22b2d707446926c9857a70f1156361eec3f19496cd6f01136e828f84"))
(278000, uint256("0x98b09f10b9e6772d6f6b110e0daf49ed620a5b564de6ab84e6f5466a830e5c55"))
(279000, uint256("0x5e21e42f71742085dba3389732bd43849f91de0fb57d1edc509a1766b32fc574"))
(280000, uint256("0x6b644e3eb9ea2056bd8aa22e0dae10e497a84a16d88934429df617b18405f28e"))
(281000, uint256("0x8b7da9aff59ec8f397c9e8e03cf0e6945f37a7f668016862c960d2dd727ef76d"))
(282000, uint256("0xb09f050ba3f80c44225609bf28c7346b9baec569eabf2fc840e8f9ae777953f8"))
(283000, uint256("0x902cc79383afcc643391813a873436017c5295a7e261b2f72904fceec6b85a3b"))
(284000, uint256("0x19227109cfc95f76edcb2205aa811774c3b5daf2c670f41bb87230c2f362451b"))
(285000, uint256("0x85f85fdf94e61337acadc51b708865dc5f19b547456a0034275273e879e8a410"))
(286000, uint256("0x909c5502fd1d192120425f43babc0f81d8e28d07ee600f6534fa2f99d98d465e"))
(287000, uint256("0xa49afa35f0a41a940b0ccdb6756cb58ac3f3b819bd32a2e40a59a32977f30cd7"))
(288000, uint256("0x11a09e2c20f7c665de926ff02dd6d6b590752223981afda967c6b0b6f5cf88dd"))
(289000, uint256("0xb818b245d394c2cbcf196427154392942c13f022dea2213f84fe39de4e39acd0"))
(290000, uint256("0x18c0a7e8cd91b608f16d88f55807cefc51d805591797bd1801dcd8fdb350a234"))
(291000, uint256("0xe2625c7c89e7492afafb6dfefa7f19e8fb6a8cb50c66298a7acff23345b533ed"))
(292000, uint256("0x27b34d9ae87784726fdd1ee8bb2d9a0f43ab9eeab65159d41641de8216a11f79"))
(293000, uint256("0x9673b17d61d4922c9031da8f888ca09f4f443571f578759c067e9c76e84a6cb3"))
(294000, uint256("0x4dd01f3ae0362244424e8d9fa193b21af2781fc9f41fbf3a463167464875faea"))
(295000, uint256("0x7b5b07537614e54f898691a35f24b7eae629006b317c1a69b1899f1e7baf2fe9"))
(296000, uint256("0x6703a7071b7bc39440ab367eb44b2aa36095e7244525f4f30a31325977db713e"))
(297000, uint256("0x544a814fa55bd9318006df5b41a9327b67e8acf879f817be4456c49b6cc48689"))
(298000, uint256("0xc6c733f73727670dd32f0aaa80d4ccf177f736a4f02b1dc7dfe6098befc08893"))
(299000, uint256("0x8ef753a5eec367168c30aff883099ba77a2d67ae2dd71dbbebcc45ad0fda29ec"))
(300000, uint256("0x521fb5df867b886f73ba639dea6d0df683abfb2bcb9bd6e92c92001b1f5f302f"))
(301000, uint256("0xa80a360a1a95db822aba846430c90132be3b694fd9773279545d2fa8d34cea50"))
(302000, uint256("0x6563211c6cf1014a053334283fc0a17dea03cd68a7b8fa6ad592ccb7fce7c4f7"))
(303000, uint256("0x10ce2902454e1cd153f9b68fd95f17d03bf5edbdc53f17f64ee83d827f8c96a7"))
(304000, uint256("0x98c607dc8c5c0a4fc241459b3397688bd7fd388cbb4c5b9b71e180eafc8346f3"))
(305000, uint256("0x84e0a0e37016a33b52e9e028e0298d6aaa639c471d44f63d2a5cf44f294af313"))
(306000, uint256("0xeab713c2ae7eb4b647194dec0cb719bedbbefbd6fb61a4d38530ea33fe4f6cc4"))
(307000, uint256("0x2f2a6f7fd8679fcd2abd547c680ef9a14269bab3af04bce240809a3ab348d4fc"))
(308000, uint256("0x562660f45e46aaa4148e0b78d2e0678ee73d8de97da953b096ae5aea723cbaa8"))
(309000, uint256("0x410a1b3ef3910766da5b8670fb890964e31c0c22cca08c304358cfb1b0fed2e6"))
(310000, uint256("0x6448d9c77ac705fb39ab57f3aa78c51ac07a2bc10fe7524584343732cc2ccac5"))
(311000, uint256("0x114a8a8695a71173f23a0c31badfd6779817a3c06ca12cf6c1c69e3d99982fe4"))
(312000, uint256("0x2edb75fd2f962ea204bf54235f7a2ac96b4c81c551b2c2bb528563d42fa9ee67"))
(313000, uint256("0xc95a91196f2c9ed5f0be2d7d99825e355b066fd77c26437c994d3042d46c9fe4"))
(314000, uint256("0x7fb232379dbba22bed9341f8c34a4b79b3fd39cedae9fd3b38aa2fd770a8af03"))
(315000, uint256("0xd00e40bd7bcfc33d68fdc680328198945ee11b475c4564a2cb0ee654505c161a"))
(316000, uint256("0xa0b7d91178a647a78db72e83ca651516dd4418c616d208f564f0a9081f822ae1"))
(317000, uint256("0xcf9a98053b6d46aec95d9d6bfd6d4668fd6183c5489d239232af0e781edc3fb0"))
(318000, uint256("0x77b3ac08782f181d4a196d2b7835e81520a248b75b81ea7de07a6621516a53b1"))
(319000, uint256("0x3706667fe1980c5bf4e1ef104a6ce6e8e2c7d7ffdba295d9159a584c42196483"))
(320000, uint256("0xa29bd386cccca3cf2ca568ab9bb06c52334b6b3f6255a9f8cdd23ecac95055be"))
(321000, uint256("0xb57039945beee9c16b4e27f843c8dd6eca95075c45f225d6c028836fdf68d982"))
(322000, uint256("0x21d88760a528590f95f26ebc6fbc452de84a0e9f793bfe283dcb1201e2a4b016"))
(323000, uint256("0xfad2b93ee2362370e1f2d0008b140d01246766aa261b1b3e279b04c420bd7f7a"))
(324000, uint256("0x38e3392faeb5f5c49daebba69aa50b157934e9920c445b288fa671010d870a0d"))
(325000, uint256("0x10d27ff230e403a1a7dbdd00181415a7a7d865124b5a34c3b366918dcbc2dd4a"))
(326000, uint256("0x96cbb192e3d9671cb3924ed2c53ca9dc577cf49e239f06ba861ffd9f2eab2ce6"))
(327000, uint256("0xf64dffeeb12c132a5f2c9cad53faf60ebdcf4d88053e39a06307bcd6556e4383"))
(328000, uint256("0xe43b4f52c1fc57df33a08c07e9fd3a898e483f7737ed3dc96e15fbbb9584e459"))
(329000, uint256("0x35924e7d17d04189801e9f4b3b68faeaa8ce766465e9d5aa2c32315da7b510ea"))
(330000, uint256("0x60e57251dfc4d2debbe5da185b44f8220f7d3d9b1d006177d347c8e120a011b4"))
(331000, uint256("0x0fe6e7ea04b0346f7942b2eb70d77b2ed899f5219295239888caba4d81571ffa"))
(332000, uint256("0xd344626d0bb0f55c2f46b70eb30ad2a18528680312ae5814839d21167e5ac083"))
(333000, uint256("0x8bf427aabc5f9b9a7d00d017ff4778313eede3335ce3198e7defce3861edd1ca"))
(334000, uint256("0xdb9dc2079425c15b19f1f207a7973c69fcb1b004bb6c84b9b7c1dab3dc65149a"))
(335000, uint256("0xaa6ab3e531262214ba42c23ac6f37e400d77abf86fa62eb5303a2e75cc7f82fd"))
(336000, uint256("0x4ced1e5813759ac78529b5e2530847f6957b91ca8cbb876389904feec9265977"))
(337000, uint256("0xbb2d3e2076443a6c1dc88676615d5c961a1efc1924411af12d51a67f5057b0c2"))
(338000, uint256("0x22b51646690b67132b3bc012a524f9ea9d0a5518586a1e1e07aef3f8e401e9c7"))
(339000, uint256("0x7c03aff6972e7b91f73d3839c43f45ece32da96bc0b38246f28bc8432af333ca"))
(340000, uint256("0xb9b17a37752db1cbea9e3a6e771d766a5658013ca2c9ed34091b65f25194ebd6"))
(341000, uint256("0x420c25cf7ef8efdd6424e975bf8c07faa11a023c7c55eb4c24d691214a65627e"))
(342000, uint256("0x0f7e12fcf41569454c6f3dcae9d59c393823a58ba37da90895b87d74132ffc93"))
(343000, uint256("0x863d6b2bcec739c450fbc8c1cc2d2cc35b66897aae15e5a9da96f51a53ea2f22"))
(344000, uint256("0xcd50fe6d86b1d4c96a8ac6343f15f2acb4ed427d1d54dbd36801b0a8706ae949"))
(345000, uint256("0xa9e7d04c7f6905fa0a89d29fded7df9ef9cc1ef144843966c744c2feac543d0c"))
(346000, uint256("0xf2795d1bc9a74ff6068948282f49f349ba3c12e8d9c5388c27c0c17d4e8cddf0"))
(347000, uint256("0xf9957d0387d8d88932c667ab4acf6b82aa4ed34dfd7d8c56af7561ca39705607"))
(348000, uint256("0xc4715309b02f6ea608e6e736fc8b3b189810447ad7efdf38b6f29bc70c016f88"))
(349000, uint256("0xca0dc6a601044e7c61c9eca2e9ee35d3b4552a903a35c3ddd345b0cf9aba72ad"))
(350000, uint256("0x31f2d5fc15e91ca42d71fe5e3636f534a172d9e327198d853d2aec5f53e458a8"))
(351000, uint256("0xeab897774b80da20c0e380b389a1f17876c8d5146bbd322d04c899f3ecb179e7"))
(352000, uint256("0xfab46b5390e4ee7c02490c5afd9ad513bd15dd2131f5eddb4c8cfc70fdcdf04b"))
(353000, uint256("0x4220b694c6d2c9c07e9032417610d056a8139eec4bc555d083a83b0cc18d620c"))
(354000, uint256("0x3ec39d9e715bf74fdac8c4400105030bedac35a1117b01b5deacf63221468792"))
(355000, uint256("0xdde38564577b4dd80a975eea347b7226c361ad8cfca0ed7090160fa5a3a22434"))
(356000, uint256("0xcce030ad344789a240c783bc9867337b555a7c0df4f550deedfbd1b1d53cfafb"))
(357000, uint256("0xd4ae160ce8138d1bc3dab42adbd0a813f112180760cf7b04ea6133b672aaade7"))
(358000, uint256("0x7d08e36f71f8d6b8bc8ff36661b3ff22880b6469d43617e831c486f4641b0c43"))
(359000, uint256("0x4311e4e55aad326c2768d3132b6a566f205f506773445641d5a57345ef0b3f72"))
(360000, uint256("0xf3ebaaaaf861645f302407cc1add3173ff45c3bd173d3876c53c393266a9bf3c"))
(361000, uint256("0x6a17170afdc7b060f2ae3414fcb4fd926d25d46639a2d21a627b1900ccb3c214"))
(362000, uint256("0xe71ff5e71558f4452887f7e41e9f797880ccb796bd910f9188f2320945345c25"))
(363000, uint256("0x3f657c2a8747ad20b5ead511ea9e6744182c8e375aa234b7cd394fd56a30a913"))
(364000, uint256("0x59db8a3ac29e2d6cab2c67cd946157799606b8a8fa295db92e75a911dfc16322"))
(365000, uint256("0x84c6fdca2ede61b06878c96e6c60d12f27b671ea922f69d69d52c6c169ef2b4b"))
(366000, uint256("0x42b2726fde8035cb18b135ec633b36fab20ecc2bf40ccd7e4fe996269ece8e0f"))
(367000, uint256("0x755088e0e51ea3a949dbd1b52e735036e6081d833318e95f4ab850a55e0e8023"))
(368000, uint256("0xaad2936ea62acca816ad9188ffb59cadd60b3f40ca2f03f9855bb2e9ccd272bb"))
(369000, uint256("0xedc9269f570c895a4148e1a86eb9113fc5f0fe50faa6e6a19e163f7daa1a9966"))
(370000, uint256("0x622cd2726de59f8f1d5a2448162f2879130b14ed99a438016d1ebe6fbbe054cc"))
(371000, uint256("0xc7b6897b0158e26a2366d7524b2e4882c22ca1561f2d0a74fff2de5836e4663b"))
(372000, uint256("0x2e2cc50c021ae6074a6dc6ce85855db8900e915f4a05831ad523576b404dc707"))
(373000, uint256("0x12fa0a93a3a1a1a82d1e66ff179f5b0f484a39a548cd90122a533e1255c903ff"))
(374000, uint256("0x9303b1ed834e50b2a1cd2eb89715d8240d917f4718ee5ed2f19c5df9534bfb24"))
(375000, uint256("0xc044bbc47375c3c2ea7b883a568e0fc56f1069a2fffd7bad69f04cca4fb78b3b"))
(376000, uint256("0xc12f61ce149ae05700a3b3934b6325b6504822cf9563f5650303991a85eac757"))
(377000, uint256("0xa19a3f17cdf1f70bf41bcf95e7ad58c7b2017b84c2f688ef867914ba2b5bd265"))
(378000, uint256("0x04f6677b6c274a0c99783f91b93b76f1495b652f246814941f131a641a8c6cd1"))
(379000, uint256("0x66ed6331498a3e709508dda6b001f562234764d6353dbca8451d16a487b2e400"))
(380000, uint256("0x0a358ad24dc401d4a7f7dbf5b3a0bd75501f1063d6d47e5659fb1c8a8f766d0c"))
(381000, uint256("0x85655a24646b956ed8fdf65bfb3e01393b845d982dae699f732bdcba12dcc2fb"))
(382000, uint256("0x808c8da327f3c885348dbff7913b8a8d8be09084b4635d57cea7f5df52264eec"))
(383000, uint256("0xc8f9c323b7d2bb68811fe28b5290b58dba704ea5ae6b8f4ebb4eab1348e345cb"))
(384000, uint256("0x32a10f1f6d9f591698b8b85561d2e74fc859cebaa06a0809b099f170a1cbc46c"))
(385000, uint256("0xaea2750512b7bf3f07ec6cc46e44a50c8f5769631fd3523f62c74f6465d5e07b"))
(386000, uint256("0x5559b476322f2aea7c8ad7625d64f2ca56d238474599675344d4619af96bec16"))
(387000, uint256("0x36f348ffc2da10ec716b8d6fecbe048d19dbce2451aa3849ffd6b12793a6bdad"))
(388000, uint256("0xffc7b7bc83a92a1253860f08bd12207e4ebaebcff55a544a6190a30187b05267"))
(389000, uint256("0xe41c512204a0f71a097c453e5be0ced46f037baabe26676f4da7e10ee61e96f0"))
(390000, uint256("0xe1cf4030c2a29cc05c43c1a9126191a5ae598521e9c318bb6a6df78e258353b9"))
(391000, uint256("0x42946818fd9515585b1ce7cacf63bc52dc3f0b526b324ed51c228d85300b8bf2"))
(392000, uint256("0xf70e91bce3bf338c1b444c339ee06db97ed9d23a6f7e32e4cb849088dc23976c"))
(393000, uint256("0x0fce33e4798b6d501614079c8706a9c209372251311900568d4f3c63f0967b99"))
(394000, uint256("0x893d0c33eff8e199c28e3a9b23a7ef934ed632b3adf3c442b546ac412bd117c9"))
(395000, uint256("0x605b19062c8a466e6fa4f034fd1db745ed680fdd3e53de80453c52ec25f2053f"))
(396000, uint256("0x9402b9be14754c0d351875bb4d13609c8a4255c9fc9e418b38b011a1d2fa388e"))
(397000, uint256("0xf3ac76c3a6884fd53d9257344ee86e01248c0e94aa035f4808b4c60e058efbf5"))
(398000, uint256("0x7bb5a763fffd37e791cb3571dbcc2538a31ad41c63a1b249ea45e5ba6f08b175"))
(399000, uint256("0x34e93cb6135bd72ee799de769ba2cf66daa0376241745cd574f78db370d04fae"))
(400000, uint256("0x90d76c5c2515c70b50d822fffecd530846a964d911d036f24c32a25657368031"))
(401000, uint256("0xc6fa35eb41ab86b7a687216eb371ee17a0ca9ec86450243b7b308bef68ca69b9"))
(402000, uint256("0xcb6038640d2df30f5b11dd5600fe4b77b92c7158f3c9e48611d5fdf18aee8f0d"))
(403000, uint256("0x0528d56fd9e07ca8a11fa1ae7d791671700de112359e390805cbedabac24c84e"))
(404000, uint256("0x7a0288efc5f1f03e4c55de0bcaed973096d25eb5578e569dbde5d7803d67c07c"))
(405000, uint256("0x313646b94df6252b00779df1697131ea1bfade54dfd17476b28b9545e59f6bbf"))
(406000, uint256("0xc22fa16746a2c20a272e35cb844fa0091d4c0fc8194aff3355d08abc77423792"))
(407000, uint256("0xdc95f5982560420807f99afcd3d0563a094ac0b6e6a55e09ee95e0435c3995cb"))
(408000, uint256("0x64de1aaf60c03f3a01d51f540e3dd99cff5da52e59ff896d5871b45886ef46a4"))
(409000, uint256("0x851a3838764ab9b890ede9c95b3bc2ada820a9b20be6b2956c5d15f090b32bd3"))
(410000, uint256("0x6f6d223f318435d1c4427913f2583d6bc1a05cd29ea03df03d390d21ba863a79"))
(411000, uint256("0x62ca907bbb3e23636b83319cb78a8a6b7f0f2e4fcc3440f8a8a87672b2315b1c"))
(412000, uint256("0x085d7264a79dc7a7a4b529e67d230fdd0ce34dcf32eb6e48a511ffb83d374428"))
(413000, uint256("0xb37a85bd8a54624e34e675c83446b4fa7730d01532b4c9d3319e64b1f3488651"))
(414000, uint256("0xce4593e72a6a0c9aa2ca2c747dea44a2bee5eb0b29f6d726b6c5831f59043a95"))
(415000, uint256("0x820c77eebb6df449b1dc7777adbd660cdd77bb55baad314f289775983ffdf976"))
(416000, uint256("0xef873f048c847400f939b85fabfb0aa879643ff4fe2447b95c582a73c30ab295"))
(417000, uint256("0xaef6c6916a0d16ed3c452348a5460af03625db6a19fda4bbdab2c61aca0f2827"))
(418000, uint256("0xe67a0c7bd6b727ea89e8f7a5d04aa0b017538286657aa8bafc9d61cd3a24e7d2"))
(419000, uint256("0x2542eecce486a3eac06d907d80cf42ac3c93be6f72f70bdc98dd49c7431f8248"))
(420000, uint256("0x2a323c931885955703c5bd5532a52e31f233f8a90d631559632414703c7b8bfb"))
(421000, uint256("0x6de3743c21764385e123dafcb376bf6d83d2653d41825307788aec6a9697cba5"))
(422000, uint256("0xaec5c4370dbab61c8477cffd6a67b29d017f56b32b0d7c1b392efd2250409543"))
(423000, uint256("0xdac9db71de9b8e569e13d228cfeb978e66dd3255338d20e7ac712a0bdf989a7b"))
(424000, uint256("0x8a2bdba2dee006dcc06127f0d141f42b99f9857f96271a6720a9c5491f646e5b"))
(425000, uint256("0xb2d410b8990228120e4a7f5c0e3ffa1f1b72762c8f4faba7c9ef989115ea7c42"))
(426000, uint256("0x9f59cb4fcbebdf31a11e934c8619ef87ba1b1b7089b922aa623ef3d028fab2a4"))
(427000, uint256("0xd6a7116bac391e86da2564b529970d7ac22108764a35201aceb79bd247e9153a"))
(428000, uint256("0xe1a3d5d2f5ef44285f92c96614484c4c7f580c97b5d7f789d88bf3d00ecba998"))
(429000, uint256("0x3954a3637e837f208280f989717a86dd2f74c51e17f63c9bebc43b5e53cc5c29"))
(430000, uint256("0x6e656b26d24bcd8b52612059581634f860f64dc8cde987e5a9d2f960a87846eb"))
(431000, uint256("0x0adf7953760682941768d1409be90129b6023d86bd0a556820847b06f12ff08e"))
(432000, uint256("0x37c309b8525556589039975cad22690d4dc2802f5d0bf9e9dd8f99549e329586"))
(433000, uint256("0x98637c6cc7413b3cb3d2613cfe47719f210c1deeabcb6bd79bf98147b19e5ec8"))
(434000, uint256("0xdee051f315c1b0b0789e99c5833c9194559f86d57304a139d9bda84c34c1b58d"))
(435000, uint256("0x8a5dd1a6901c8fceb114d7b49fad302329d10d9a2e5814af0d790699dc275066"))
(436000, uint256("0xec9aa4ae391d27df190ba32a81e8c03bc93c46741562838115539731f6e05f4a"))
(437000, uint256("0xd62c829f1013b95c1598fb900a46238c8930b921de1d560ef83d26afc8dd35b9"))
(438000, uint256("0xb16183ff4eb451d8bfdf088226427b561cce0549d9dd07a29bb8353d62c75172"))
(439000, uint256("0x70a50c0972bbfba872aa5e518e4e0dfa0ac2d8c4c01052c60c7b6f9623c9311a"))
(440000, uint256("0xdf13117702382d717f9f670b52633dfae19bc576b987e2e21a98fed5b2c1fc0f"))
(441000, uint256("0x2d7aca7d653a48db416ec642e6d7ad493a39e3c0e1beb21d0a75dadd06365dd5"))
(442000, uint256("0x357d1edc010a5b799739769867e840c47bfb5d945fba0a788526cf38c89fe1e2"))
(443000, uint256("0x5307a4474830a8bb0a0598f5512d1a670e62fe51673c0ae62c09287bc68ed3a2"))
(444000, uint256("0x3776d95180175b40a158e4024821ab53a5965f5ac5ffa46c3cdacd6a88587943"))
(445000, uint256("0x36579c72ec1365d8f2365518fd3e77869b3bdf8b10ecd37a480bacef42a464d1"))
(446000, uint256("0x47feb1073313a55b09a423eb88a98de4024a802f12239b73b6c77d783150d4cf"))
(447000, uint256("0x1f966b38bdf33287980c17e728d7fdab12c39173697debfb87b80db17a5c5734"))
(448000, uint256("0xabcadf0d7304fd6ed16ac1e4d5c2beaecfab1ad90a7bcd3516a07852688cde89"))
(449000, uint256("0xb3f3a0d3984500ae710ccf3dedd99f0ff5acc578a30fcb9a532ac63f4e5b7da7"))
(450000, uint256("0x146d4f25d54556a0d9a8e78e68277b8b473dbabd2a81086ced4ed2ec5f6d453e"))
(451000, uint256("0xbaeaa552c7b1f176008a3d2251d2f7787a58171c9cb9d69816b9493c90e96869"))
(452000, uint256("0xd3781ba93d3816e77b130efe5cd555e7029384c4f6e5b26a994091c234c4aa04"))
(453000, uint256("0x7da3ef6f3f0216b0da0bce28338bb5991162896e466a6c8e59fca1e1bdb8aaac"))
(454000, uint256("0x7b40fab2b545c8f7805cb931e31bceb2f2f132587284e09f48f2af1e97f83ff5"))
(455000, uint256("0x5e91619448a3265f3c5893cbecdaddd479ba679aa2917eaf5bb11dca1e10087d"))
(456000, uint256("0x3e5e14a6390f279d64cc66f44dada25362e63e6e7a40d25fd891e9eb740cf5fb"))
(457000, uint256("0xbbfc45bfa0cbd9a607d078a148b83abc429fada4a64ce17830799a81dde6e255"))
(458000, uint256("0xedb99efd54d1a1b0fd3bba3f945f08375a2e3ab5e8c60c13e4d8f4b81f7292f5"))
(459000, uint256("0xeabfc219dc1cb5e4ffd4908aa82c53668ea08df58112b03d3096fca05768d3ee"))
(460000, uint256("0x05ad33c4b59b0be5ca7833921d18b96530700f3934dc2154d24e15c55a4bc0c1"))
(461000, uint256("0x3cb89dba42ebc9c1213f73ba656ee8105247670fc0f3faf34abdcd5ab02d1db7"))
(462000, uint256("0x0c7ae38d9402f86be8d0171d9e671444c97151556ad069f413d504ce56195186"))
(463000, uint256("0x4c3e4af94292530e71707e5630f84299fb3a8566c2d039fd4dfdcb0bc4a41e84"))
(464000, uint256("0xa672fefcdc18abd1c8b4650ea923effcc3a05ee2dc8f7cdd0b59b7593a478261"))
(465000, uint256("0xc340e236506ada3a3a63fbaea6257c26f741b8e134c9f898189533359e4e4e2d"))
(466000, uint256("0xe4671e61fbe2fdd251aa3c16c6aa6d9ddcf49d5cb9bc940f99b5bc2ed28f1b42"))
(467000, uint256("0xcb5d0101679aa9e7ea6ccca3e59e6237be510a41c144d15fc8ffd3ed53a00328"))
(468000, uint256("0x73f9fe4f0a392d70ea4e704787e0a73649fe5624a24d68d68dc2726793d5c493"))
(469000, uint256("0xb48e0d5611c1ed58917829badd77d54b3373511e2a92be19fb25399748a5042d"))
(470000, uint256("0xa983723420c9a7b0a3a77c9ad280c4996cf2ee3cd491673a56b4e0de4ac26bb1"))
(471000, uint256("0x7f3f34d7e09d1e438d6c7029639df5df552e15582fa5ef7ba803e3dea86468c2"))
(472000, uint256("0xcc600e2dc175ddd15879971a4e7c77f3745a3c19c167b053e37c907c2f1de8d1"))
(473000, uint256("0x9bf72170d757ee14507efa2e8bed1402f95c67e9c5c29b290d872f513f3455e1"))
(474000, uint256("0xd9a566e93521dc7ab3b4acdf54993e587550541988399bb6c6b5b381d9993905"))
(475000, uint256("0x8649a62602ad42b0149907e357026534d580dc561d1399af97bf0beab899f243"))
(476000, uint256("0xf64694c8fb66ec2e35d7b752830a81b593f977c57434d6313bb40911f5f77074"))
(477000, uint256("0x04a9a3c89d3133323f8f0c86a26d1df5b9716ca400413e936a8200fbf020f30d"))
(478000, uint256("0x95b56c31a2bacf8898746b85b7c4dccffb416d198c383742d91706c13a0ccfde"))
(479000, uint256("0x70e920bdfb13250f1d4d4bd394f6ef2a7f08d8c48a1d41809cbb0a9f903a0fa2"))
(480000, uint256("0xb72bf96c737b0d1f1ce9ec759200cdf7f25a2be51482bcb0a3ded7080f222313"))
(481000, uint256("0xfdf5533552efd18a3047dff232f6ce04244ddf393b0a03c858bfa41749bde06e"))
(482000, uint256("0x421d330eeb202e4277103bf631a5b679cf3a64e1e7dd84a136929d5bbfb20851"))
(483000, uint256("0x8dd57eb0cba47fea3768702766b32af3d262ef26c0784d1d4bfd8c188877f90f"))
(484000, uint256("0x2ee2ebaf4106e37147dbd588a033de440cea6042143b9addd3a1b0d295fd05f0"))
(485000, uint256("0x1490e552f1821acca32eeb23faa959095c466c26e5c856d7fe372a7ae1f38267"))
(486000, uint256("0x2e2462019c70720b1e1135d5fc8a66328da8808d9039f72dcdbe3370264ce0a1"))
(487000, uint256("0xb4893da3aa383837bf40642c8799beea1a78e2af3c3381435b6913c3794fc219"))
(488000, uint256("0xbba44f18e2eb8292b0d4a7de0ced1c64528d63bde3d5473711e0467593887d6c"))
(489000, uint256("0x05b71c23c549d15661f26a20f04dc77c320da9a4ad8deb23c12da8b144f43ea2"))
(490000, uint256("0xca854709ee7008f3444fef7d5610ea6c8276f76d2d9c75397e1fceb68c233900"))
(491000, uint256("0x8430ec2b1ae7e799d82bc22efaf351a05c671a298c720dfb62be1b1b7343f496"))
(492000, uint256("0x6f7b6a3beb128916429166659fc94b022747ed45efc92021c56e19571d2974ce"))
(493000, uint256("0xf318397e72f7fb2305ef79f2c82c7e606494e3ff5d0b946b49423df71455abc8"))
(494000, uint256("0x162beafc5f6501e5943b8bb10fb6e7dbc2d5c349779d90640821059b74bb0036"))
(495000, uint256("0xaa1670fe4567483b050e75937b628e0dfbb49a068b71639fb518ad6dd2689fcb"))
(496000, uint256("0xe24f26122a5fd546d6d36473635dfe267374a29869531dc16011fe725ebffb69"))
(497000, uint256("0x6594514b9f7931639d716449922d65df3daff346aa76e95ebd84fdb652b9f08e"))
(498000, uint256("0xdaeb1b8f925084c5cc92f17e5052811a9e672cbe0ba35c85e80f54d0b1fb4176"))
(499000, uint256("0x5142fd0e3908854f3c8adfc78f9cadc6e766bb3494814ba8baf254d5f2b5942b"))
(500000, uint256("0xaeb1b164b4f81f96b519bd1c6a8303d9dcb42cdac70ac84580c3c7448ff497c5"))
(501000, uint256("0x54c48d8aa22369068d4894d437b43c56453925ef36f8e9b6e4e7171492ba8e79"))
(502000, uint256("0x93ec5ae1039516a82f7952f3a1d97dd0842b5c759b27a5fce8b218667bb72373"))
(503000, uint256("0xe3a10643e1ea6c3d628c9f3c61596b950edd5258d9c2be949aa16da31caaf83f"))
(504000, uint256("0xb5120b2b63645b4efce42bbc7575bcd8fc010bcec0c04247f87b40dc6071a5c2"))
(505000, uint256("0x433a5bce6a696c8d8d1a2d0672e142db094b9d87ad9b7d5b3f4d196eaf7b4b1f"))
(506000, uint256("0x683b6f9a9a3cf36d085adbdd10a74c060d32447b41ffa4ffe743963e4cf2fb0c"))
(507000, uint256("0x4dd771a079a3e45ba0faaaea70ccab8a6fb6da3b927e2f7b32e6645c3e14fcd6"))
(508000, uint256("0x3475b73e44db2b8d66285aaf394c9593353810f1a2c5ba69b90f120166df98ac"))
(509000, uint256("0x666dc899456a79ee681b1df33b78f6247f1923d2a213ae870691b345ba0eaa83"))
(510000, uint256("0x65f950e837f2f2a8008a4e178ecc454f72a2c48398e7e6acb017cfa4b841b79b"))
(511000, uint256("0xc202a9b5c9b720668782421e062cd9b8202b666f7d5d6274a13291c17d674cfa"))
(512000, uint256("0xe13ce9b6cd4c8dd0d53d0d70333bd8832c12f7c61e5b06c66aff90bf72d3c6b3"))
(513000, uint256("0xfdb0a2ffc3b98080a03d36c66aa84c5d140217cf628cc228c855047b0e8a8a6d"))
(514000, uint256("0x6ebe34c172270f4774f8ba9dd049406e8539ca2fb8a905d44a3f73b8c59cd7b5"))
(515000, uint256("0x9cea03be1688711ff59185564b60b761cd41f78f570eca7b69d9bee6ce37f757"))
(516000, uint256("0x49611bd9742924d70eae65089d023939b3f185fc391a846d78b27c8cc0d92cfa"))
(517000, uint256("0xf9e20f02312c12cce7f93cc7ac8e3cdda1cf2b4d5062c88a423568508c2cc9a9"))
(518000, uint256("0x176e857c5baef8d424570b55da7987436aefb61b935b2d942dc04fa9bbe9fd5f"))
(519000, uint256("0x1fa6546f611a9f13e262ef07f930794a814c8b51f115d3e21c86f68fd1f02cd5"))
(520000, uint256("0x805def59c028395c7144f9dcb520e104c4507f9bec2a0ebf10eba10dcc79e707"))
(521000, uint256("0xf5b7c8305968050917e542868330530763ee8cffe571cd287d1f1013d18e5a6d"))
(522000, uint256("0xa735ffa95fca39a1cd57c1e4e1dfb0ca6c870cbdbfcb8ef219792a048029fbcb"))
(523000, uint256("0xb6aa6b2c5e603b8e22dda0ee850a144d54f5ecc961e4dda6020711c402a50ee7"))
(524000, uint256("0x03a6d5305388da667e03c808a4800c5fb9ee379b8e4019654d0bc1959af4c72b"))
(525000, uint256("0xd39ac155a289b47cf8d8cbffd988b90285248d8065788288a5f01cda78f9c77f"))
(526000, uint256("0x7684388bf99fd896c289fcf60cf743aa870748bb40251ee47535a08c674f8b93"))
(527000, uint256("0x82df9675ec6a29c0286a021f423f82537d8dac459a9e4bb15bb7ffb4fb06eb03"))
(528000, uint256("0x1375ecf98351ae2b3b0e8dadc6b7de1c23d47e9e499835dffe7f0a246115074a"))
(529000, uint256("0xa8406bc2ed6a4c2ab5f0bcf2cc5f7dfa6e63ec5536ab713f33aa24ce7c3d7b2e"))
(530000, uint256("0xb2da482299d9ad004084e58b0656eec74f1f1baa1d6ec41a90fe60202baa53cb"))
(531000, uint256("0xe76b4e7104933f237d86c71947123fdb149d911dbe774c5423706437d5815f76"))
(532000, uint256("0x7e8116e2f27af8d2c05da3b799b10f2e7171146f6aa301ad00081e0cd3257ff6"))
(533000, uint256("0x75269101d89c668a1f3674e7b2cf9f30d56a84111d9989fa36eca4af513742ba"))
(534000, uint256("0x282f7fbb77efd088f0573c7e50336862aeb3712b7c3f8aac6d182b78cd8c5139"))
(535000, uint256("0xe5c592d98398bd48aa4bb1370fe0f52a0fd15487bb0d5057994883dadc101e6b"))
(536000, uint256("0x5675e075bff797623cad88a535ffb9b672336d10e51f6821897e26cd64c34b39"))
(537000, uint256("0xd091d62efea8c706cd2de3bfbc603d46fe4da1beb0caf4cf37c0ee251262ed0d"))
(538000, uint256("0xd07123c019eaf6d20fe75aa8f0f1073cdc1c9117ede44ad71e89ea46f5e4fed9"))
(539000, uint256("0x4c2a51100e4c149b53417e5d53a7ded1ceb14ff7c775f88ce24ea8c6be231128"))
(540000, uint256("0x5cda60319136ce3d1b3c3e89214f79703027cf267a3a832a52351438d649b5a6"))
(541000, uint256("0x79a27b20e4f6d1a7afbb22aecc04a0a603018759024f41b77b9dca3052ac3b4e"))
(542000, uint256("0x712b06696d1a027e0efd1c9df4bcce6e4f6039dd74861b998bba3a9c8b0da7ab"))
(543000, uint256("0x6ae604b01d178bc3eca05b0ed2bc4a328fea8952c38d8ac91438f36c1e58dea8"))
(544000, uint256("0xd0b771b60980682c21cd4db9fdf66e558fd2bcbc0b1fd16f59e55926d5e6f9de"))
(545000, uint256("0xf137a79f98955e99ab7f1786a907fb518fe8dedd2d3f5d8a5d3fb21effd3639b"))
(546000, uint256("0x9610f2cfa7951596fa5a968346c194e236421d6a47c3ed0a7a1bc92e0ed78742"))
(547000, uint256("0x1f7d0865fe9529a4ac4f064ce15613f406f05cc3f7163a2c26e9ec57c442f09b"))
(548000, uint256("0x42855a7177d19077f21df941d943b2daf9a786cf79686203690caad9c02e61b9"))
(549000, uint256("0x61fd4ac2cdced68a2fd4f77808c513a2ee1a3233172c6237bc066255219861c6"))
(550000, uint256("0x9499cde2a00549e06adcf061bca35ee6237fef2f422373325b1e9dc8a9d36cb1"));

    // TestNet has no checkpoints
    static MapCheckpoints mapCheckpointsTestnet;

    bool CheckHardened(int nHeight, const uint256& hash)
    {
        MapCheckpoints& checkpoints = (TestNet() ? mapCheckpointsTestnet : mapCheckpoints);

        MapCheckpoints::const_iterator i = checkpoints.find(nHeight);
        if (i == checkpoints.end()) return true;
        return hash == i->second;
    }

    int GetTotalBlocksEstimate()
    {
        MapCheckpoints& checkpoints = (TestNet() ? mapCheckpointsTestnet : mapCheckpoints);

        if (checkpoints.empty())
            return 0;
        return checkpoints.rbegin()->first;
    }

    CBlockIndex* GetLastCheckpoint(const std::map<uint256, CBlockIndex*>& mapBlockIndex)
    {
        MapCheckpoints& checkpoints = (TestNet() ? mapCheckpointsTestnet : mapCheckpoints);

        BOOST_REVERSE_FOREACH(const MapCheckpoints::value_type& i, checkpoints)
        {
            const uint256& hash = i.second;
            std::map<uint256, CBlockIndex*>::const_iterator t = mapBlockIndex.find(hash);
            if (t != mapBlockIndex.end())
                return t->second;
        }
        return NULL;
    }

    // ppcoin: synchronized checkpoint (centrally broadcasted)
    uint256 hashSyncCheckpoint = 0;
    uint256 hashPendingCheckpoint = 0;
    CSyncCheckpoint checkpointMessage;
    CSyncCheckpoint checkpointMessagePending;
    uint256 hashInvalidCheckpoint = 0;
    CCriticalSection cs_hashSyncCheckpoint;

    // ppcoin: get last synchronized checkpoint
    CBlockIndex* GetLastSyncCheckpoint()
    {
        LOCK(cs_hashSyncCheckpoint);
        if (!mapBlockIndex.count(hashSyncCheckpoint))
            error("GetSyncCheckpoint: block index missing for current sync-checkpoint %s", hashSyncCheckpoint.ToString());
        else
            return mapBlockIndex[hashSyncCheckpoint];
        return NULL;
    }

    // ppcoin: only descendant of current sync-checkpoint is allowed
    bool ValidateSyncCheckpoint(uint256 hashCheckpoint)
    {
        if (!mapBlockIndex.count(hashSyncCheckpoint))
            return error("ValidateSyncCheckpoint: block index missing for current sync-checkpoint %s", hashSyncCheckpoint.ToString());
        if (!mapBlockIndex.count(hashCheckpoint))
            return error("ValidateSyncCheckpoint: block index missing for received sync-checkpoint %s", hashCheckpoint.ToString());

        CBlockIndex* pindexSyncCheckpoint = mapBlockIndex[hashSyncCheckpoint];
        CBlockIndex* pindexCheckpointRecv = mapBlockIndex[hashCheckpoint];

        if (pindexCheckpointRecv->nHeight <= pindexSyncCheckpoint->nHeight)
        {
            // Received an older checkpoint, trace back from current checkpoint
            // to the same height of the received checkpoint to verify
            // that current checkpoint should be a descendant block
            CBlockIndex* pindex = pindexSyncCheckpoint;
            while (pindex->nHeight > pindexCheckpointRecv->nHeight)
                if (!(pindex = pindex->pprev))
                    return error("ValidateSyncCheckpoint: pprev null - block index structure failure");
            if (pindex->GetBlockHash() != hashCheckpoint)
            {
                hashInvalidCheckpoint = hashCheckpoint;
                return error("ValidateSyncCheckpoint: new sync-checkpoint %s is conflicting with current sync-checkpoint %s", hashCheckpoint.ToString(), hashSyncCheckpoint.ToString());
            }
            return false; // ignore older checkpoint
        }

        // Received checkpoint should be a descendant block of the current
        // checkpoint. Trace back to the same height of current checkpoint
        // to verify.
        CBlockIndex* pindex = pindexCheckpointRecv;
        while (pindex->nHeight > pindexSyncCheckpoint->nHeight)
            if (!(pindex = pindex->pprev))
                return error("ValidateSyncCheckpoint: pprev2 null - block index structure failure");
        if (pindex->GetBlockHash() != hashSyncCheckpoint)
        {
            hashInvalidCheckpoint = hashCheckpoint;
            return error("ValidateSyncCheckpoint: new sync-checkpoint %s is not a descendant of current sync-checkpoint %s", hashCheckpoint.ToString(), hashSyncCheckpoint.ToString());
        }
        return true;
    }

    bool WriteSyncCheckpoint(const uint256& hashCheckpoint)
    {
        CTxDB txdb;
        txdb.TxnBegin();
        if (!txdb.WriteSyncCheckpoint(hashCheckpoint))
        {
            txdb.TxnAbort();
            return error("WriteSyncCheckpoint(): failed to write to db sync checkpoint %s", hashCheckpoint.ToString());
        }
        if (!txdb.TxnCommit())
            return error("WriteSyncCheckpoint(): failed to commit to db sync checkpoint %s", hashCheckpoint.ToString());

        Checkpoints::hashSyncCheckpoint = hashCheckpoint;
        return true;
    }

    bool AcceptPendingSyncCheckpoint()
    {
        LOCK(cs_hashSyncCheckpoint);
        if (hashPendingCheckpoint != 0 && mapBlockIndex.count(hashPendingCheckpoint))
        {
            if (!ValidateSyncCheckpoint(hashPendingCheckpoint))
            {
                hashPendingCheckpoint = 0;
                checkpointMessagePending.SetNull();
                return false;
            }

            CTxDB txdb;
            CBlockIndex* pindexCheckpoint = mapBlockIndex[hashPendingCheckpoint];
            if (!pindexCheckpoint->IsInMainChain())
            {
                CBlock block;
                if (!block.ReadFromDisk(pindexCheckpoint))
                    return error("AcceptPendingSyncCheckpoint: ReadFromDisk failed for sync checkpoint %s", hashPendingCheckpoint.ToString());
                if (!block.SetBestChain(txdb, pindexCheckpoint))
                {
                    hashInvalidCheckpoint = hashPendingCheckpoint;
                    return error("AcceptPendingSyncCheckpoint: SetBestChain failed for sync checkpoint %s", hashPendingCheckpoint.ToString());
                }
            }

            if (!WriteSyncCheckpoint(hashPendingCheckpoint))
                return error("AcceptPendingSyncCheckpoint(): failed to write sync checkpoint %s", hashPendingCheckpoint.ToString());
            hashPendingCheckpoint = 0;
            checkpointMessage = checkpointMessagePending;
            checkpointMessagePending.SetNull();
            LogPrintf("AcceptPendingSyncCheckpoint : sync-checkpoint at %s\n", hashSyncCheckpoint.ToString());
            // relay the checkpoint
            if (!checkpointMessage.IsNull())
            {
                BOOST_FOREACH(CNode* pnode, vNodes)
                    checkpointMessage.RelayTo(pnode);
            }
            return true;
        }
        return false;
    }

    // Automatically select a suitable sync-checkpoint 
    const CBlockIndex* AutoSelectSyncCheckpoint()
    {
        const CBlockIndex *pindex = pindexBest;
        // Search backward for a block within max span and maturity window
        while (pindex->pprev && pindex->nHeight + nCheckpointSpan > pindexBest->nHeight)
            pindex = pindex->pprev;
        return pindex;
    }

    // Check against synchronized checkpoint
    bool CheckSync(int nHeight)
    {
        const CBlockIndex* pindexSync = AutoSelectSyncCheckpoint();
        if (nHeight <= pindexSync->nHeight){
            return false;
        }
        return true;
    }

    // ppcoin: reset synchronized checkpoint to last hardened checkpoint
    bool ResetSyncCheckpoint()
    {
        LOCK(cs_hashSyncCheckpoint);
        const uint256& hash = mapCheckpoints.rbegin()->second;
        if (mapBlockIndex.count(hash) && !mapBlockIndex[hash]->IsInMainChain())
        {
            // checkpoint block accepted but not yet in main chain
            LogPrintf("ResetSyncCheckpoint: SetBestChain to hardened checkpoint %s\n", hash.ToString());
            CTxDB txdb;
            CBlock block;
            if (!block.ReadFromDisk(mapBlockIndex[hash]))
                return error("ResetSyncCheckpoint: ReadFromDisk failed for hardened checkpoint %s", hash.ToString());
            if (!block.SetBestChain(txdb, mapBlockIndex[hash]))
            {
                return error("ResetSyncCheckpoint: SetBestChain failed for hardened checkpoint %s", hash.ToString());
            }
        }
        else if(!mapBlockIndex.count(hash))
        {
            // checkpoint block not yet accepted
            hashPendingCheckpoint = hash;
            checkpointMessagePending.SetNull();
            LogPrintf("ResetSyncCheckpoint: pending for sync-checkpoint %s\n", hashPendingCheckpoint.ToString());
        }

        BOOST_REVERSE_FOREACH(const MapCheckpoints::value_type& i, mapCheckpoints)
        {
            const uint256& hash = i.second;
            if (mapBlockIndex.count(hash) && mapBlockIndex[hash]->IsInMainChain())
            {
                if (!WriteSyncCheckpoint(hash))
                    return error("ResetSyncCheckpoint: failed to write sync checkpoint %s", hash.ToString());
                LogPrintf("ResetSyncCheckpoint: sync-checkpoint reset to %s\n", hashSyncCheckpoint.ToString());
                return true;
            }
        }

        if (!WriteSyncCheckpoint(Params().HashGenesisBlock()))
            return error("ResetSyncCheckpoint: failed to write sync checkpoint genesis block");
        LogPrintf("ResetSyncCheckpoint: sync-checkpoint reset to genesis block\n");
        return true;
    }

    bool SetCheckpointPrivKey(std::string strPrivKey)
    {
        // Test signing a sync-checkpoint with genesis block
        CSyncCheckpoint checkpoint;
        checkpoint.hashCheckpoint = Params().HashGenesisBlock();
        CDataStream sMsg(SER_NETWORK, PROTOCOL_VERSION);
        sMsg << (CUnsignedSyncCheckpoint)checkpoint;
        checkpoint.vchMsg = std::vector<unsigned char>(sMsg.begin(), sMsg.end());

        std::vector<unsigned char> vchPrivKey = ParseHex(strPrivKey);
        CKey key;
        key.SetPrivKey(CPrivKey(vchPrivKey.begin(), vchPrivKey.end()), false); // if key is not correct openssl may crash
        if (!key.Sign(Hash(checkpoint.vchMsg.begin(), checkpoint.vchMsg.end()), checkpoint.vchSig))
            return false;

        // Test signing successful, proceed
        CSyncCheckpoint::strMasterPrivKey = strPrivKey;
        return true;
    }

    bool SendSyncCheckpoint(uint256 hashCheckpoint)
    {
        CSyncCheckpoint checkpoint;
        checkpoint.hashCheckpoint = hashCheckpoint;
        CDataStream sMsg(SER_NETWORK, PROTOCOL_VERSION);
        sMsg << (CUnsignedSyncCheckpoint)checkpoint;
        checkpoint.vchMsg = std::vector<unsigned char>(sMsg.begin(), sMsg.end());

        if (CSyncCheckpoint::strMasterPrivKey.empty())
            return error("SendSyncCheckpoint: Checkpoint master key unavailable.");
        std::vector<unsigned char> vchPrivKey = ParseHex(CSyncCheckpoint::strMasterPrivKey);
        CKey key;
        key.SetPrivKey(CPrivKey(vchPrivKey.begin(), vchPrivKey.end()), false); // if key is not correct openssl may crash
        if (!key.Sign(Hash(checkpoint.vchMsg.begin(), checkpoint.vchMsg.end()), checkpoint.vchSig))
            return error("SendSyncCheckpoint: Unable to sign checkpoint, check private key?");

        if(!checkpoint.ProcessSyncCheckpoint(NULL))
        {
            LogPrintf("WARNING: SendSyncCheckpoint: Failed to process checkpoint.\n");
            return false;
        }

        // Relay checkpoint
        {
            LOCK(cs_vNodes);
            BOOST_FOREACH(CNode* pnode, vNodes)
                checkpoint.RelayTo(pnode);
        }
        return true;
    }
}

// ppcoin: sync-checkpoint master key
const std::string CSyncCheckpoint::strMasterPubKey = "041ffd35fc30420ad2bfa8312bd4d3d0b8cd29913df33863ae218c88eac752b35b8d26151026b5043c225b4d50b4bc023aae9c4366f70616b5581cc716749868ab";

std::string CSyncCheckpoint::strMasterPrivKey = "";

bool CSyncCheckpoint::RelayTo(CNode* pnode) const
{
    // don't relay to nodes which haven't sent their version message
    if (pnode->nVersion == 0)
        return false;
    // returns true if wasn't already sent
    if (pnode->hashCheckpointKnown != hashCheckpoint)
    {
        pnode->hashCheckpointKnown = hashCheckpoint;
        pnode->PushMessage("checkpoint", *this);
        return true;
    }
    return false;
}

// ppcoin: verify signature of sync-checkpoint message
bool CSyncCheckpoint::CheckSignature()
{
    CPubKey key(ParseHex(CSyncCheckpoint::strMasterPubKey));
    if (!key.Verify(Hash(vchMsg.begin(), vchMsg.end()), vchSig))
        return error("CSyncCheckpoint::CheckSignature() : verify signature failed");

    // Now unserialize the data
    CDataStream sMsg(vchMsg, SER_NETWORK, PROTOCOL_VERSION);
    sMsg >> *(CUnsignedSyncCheckpoint*)this;
    return true;
}

// ppcoin: process synchronized checkpoint
bool CSyncCheckpoint::ProcessSyncCheckpoint(CNode* pfrom)
{
    
    if (!CheckSignature())
        return false;

    LOCK(Checkpoints::cs_hashSyncCheckpoint);
    if (!mapBlockIndex.count(hashCheckpoint))
    {
        // We haven't received the checkpoint chain, keep the checkpoint as pending
        Checkpoints::hashPendingCheckpoint = hashCheckpoint;
        Checkpoints::checkpointMessagePending = *this;
        LogPrintf("ProcessSyncCheckpoint: pending for sync-checkpoint %s\n", hashCheckpoint.ToString());
        return false;
    }

    if (!Checkpoints::ValidateSyncCheckpoint(hashCheckpoint))
        return false;

    CTxDB txdb;
    CBlockIndex* pindexCheckpoint = mapBlockIndex[hashCheckpoint];
    if (!pindexCheckpoint->IsInMainChain())
    {
        // checkpoint chain received but not yet main chain
        CBlock block;
        if (!block.ReadFromDisk(pindexCheckpoint))
            return error("ProcessSyncCheckpoint: ReadFromDisk failed for sync checkpoint %s", hashCheckpoint.ToString());
        if (!block.SetBestChain(txdb, pindexCheckpoint))
        {
            Checkpoints::hashInvalidCheckpoint = hashCheckpoint;
            return error("ProcessSyncCheckpoint: SetBestChain failed for sync checkpoint %s", hashCheckpoint.ToString());
        }
    }

    if (!Checkpoints::WriteSyncCheckpoint(hashCheckpoint))
        return error("ProcessSyncCheckpoint(): failed to write sync checkpoint %s", hashCheckpoint.ToString());
    Checkpoints::checkpointMessage = *this;
    Checkpoints::hashPendingCheckpoint = 0;
    Checkpoints::checkpointMessagePending.SetNull();
    LogPrintf("ProcessSyncCheckpoint: sync-checkpoint at %s\n", hashCheckpoint.ToString());
    return true;
}
